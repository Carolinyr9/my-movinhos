-- This script is designed for H2/PostgreSQL and may need minor adjustments for other databases.

-- Drop tables in reverse order of creation to handle foreign key constraints
DROP TABLE IF EXISTS content_flags;
DROP TABLE IF EXISTS reviews;
DROP TABLE IF EXISTS watchlist_movies;
DROP TABLE IF EXISTS movie_genres;
DROP TABLE IF EXISTS user_roles;
DROP TABLE IF EXISTS user_favorites;
DROP TABLE IF EXISTS user_watcheds;
DROP TABLE IF EXISTS watchlists;
DROP TABLE IF EXISTS roles;
DROP TABLE IF EXISTS genres;
DROP TABLE IF EXISTS movies;
DROP TABLE IF EXISTS users;


-- =====================================================================================
-- INDEPENDENT TABLES (These have no foreign keys to other tables in this schema)
-- Entities extending BaseEntity will get their 'id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY' from it.
-- =====================================================================================

-- Corresponds to Role.java
CREATE TABLE roles (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    role_name VARCHAR(20) NOT NULL UNIQUE,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL,
    updated_at TIMESTAMP NOT NULL
);

-- Corresponds to Genre.java
CREATE TABLE genres (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name VARCHAR(20) NOT NULL UNIQUE,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL,
    updated_at TIMESTAMP NOT NULL
);

-- Corresponds to User.java
CREATE TABLE users (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name VARCHAR(255),
    email VARCHAR(255) UNIQUE,
    password VARCHAR(255),
    roles ENUM('ROLE_USER', 'ROLE_ADMIN') NOT NULL,
    username VARCHAR(255) UNIQUE,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL,
    updated_at TIMESTAMP NOT NULL
);

-- Corresponds to Movie.java
CREATE TABLE movies (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    title VARCHAR(255) NOT NULL UNIQUE,
    synopsis VARCHAR(255),
    release_year INT NOT NULL,
    duration INT NOT NULL,
    content_rating VARCHAR(255),
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL,
    updated_at TIMESTAMP NOT NULL
);


-- =====================================================================================
-- DEPENDENT TABLES (These have foreign keys to the tables above)
-- =====================================================================================

-- Corresponds to Watchlist.java
CREATE TABLE watchlists (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name VARCHAR(255),
    description VARCHAR(255),
    user_id BIGINT NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL,
    updated_at TIMESTAMP NOT NULL,
    CONSTRAINT fk_watchlist_user FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE
);

-- Corresponds to UserWatched.java
CREATE TABLE user_watcheds (
    user_id BIGINT NOT NULL,
    movie_id BIGINT NOT NULL,
    watched_at TIMESTAMP NOT NULL,
    PRIMARY KEY (user_id, movie_id),
    CONSTRAINT fk_watched_user FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE,
    CONSTRAINT fk_watched_movie FOREIGN KEY (movie_id) REFERENCES movies(id) ON DELETE CASCADE
);

-- Corresponds to UserFavorite.java
CREATE TABLE user_favorites (
    user_id BIGINT NOT NULL,
    movie_id BIGINT NOT NULL,
    favorited_at TIMESTAMP NOT NULL,
    PRIMARY KEY (user_id, movie_id),
    CONSTRAINT fk_favorite_user FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE,
    CONSTRAINT fk_favorite_movie FOREIGN KEY (movie_id) REFERENCES movies(id) ON DELETE CASCADE
);

-- Corresponds to Review.java (now extends BaseEntity for a simple ID)
CREATE TABLE reviews (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, -- Simple ID from BaseEntity
    hidden BOOLEAN NOT NULL DEFAULT FALSE,
    content TEXT,
    direction_score INT,
    screenplay_score INT,
    cinematography_score INT,
    general_score INT,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL,
    updated_at TIMESTAMP NOT NULL,
    likes_count INT NOT NULL DEFAULT 0,
    user_watched_user_id BIGINT NOT NULL, -- FK part 1 to user_watcheds
    user_watched_movie_id BIGINT NOT NULL, -- FK part 2 to user_watcheds
    CONSTRAINT fk_review_userwatched FOREIGN KEY (user_watched_user_id, user_watched_movie_id) REFERENCES user_watcheds(user_id, movie_id) ON DELETE CASCADE,
    CONSTRAINT uq_review_userwatched UNIQUE (user_watched_user_id, user_watched_movie_id) -- Ensures One-to-One with UserWatched
);


-- =====================================================================================
-- JOIN TABLES (For Many-to-Many relationships)
-- =====================================================================================

-- Corresponds to the @JoinTable in User.java
CREATE TABLE user_roles (
    user_id BIGINT NOT NULL,
    role_id BIGINT NOT NULL,
    PRIMARY KEY (user_id, role_id),
    CONSTRAINT fk_userroles_user FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE,
    CONSTRAINT fk_userroles_role FOREIGN KEY (role_id) REFERENCES roles(id) ON DELETE CASCADE
);

-- Corresponds to the @JoinTable in Movie.java
CREATE TABLE movie_genres (
    movie_id BIGINT NOT NULL,
    genre_id BIGINT NOT NULL,
    PRIMARY KEY (movie_id, genre_id),
    CONSTRAINT fk_moviegenres_movie FOREIGN KEY (movie_id) REFERENCES movies(id) ON DELETE CASCADE,
    CONSTRAINT fk_moviegenres_genre FOREIGN KEY (genre_id) REFERENCES genres(id) ON DELETE CASCADE
);

-- Corresponds to the @JoinTable in Watchlist.java
CREATE TABLE watchlist_movies (
    watchlist_id BIGINT NOT NULL,
    movie_id BIGINT NOT NULL,
    PRIMARY KEY (watchlist_id, movie_id),
    CONSTRAINT fk_watchlistmovies_watchlist FOREIGN KEY (watchlist_id) REFERENCES watchlists(id) ON DELETE CASCADE,
    CONSTRAINT fk_watchlistmovies_movie FOREIGN KEY (movie_id) REFERENCES movies(id) ON DELETE CASCADE
);

-- Corresponds to ContentFlag.java (with simplified FK to Review's new simple ID)
CREATE TABLE content_flags (
    reporter_user_id BIGINT NOT NULL, -- From UserReviewId.user (or userId)
    review_id BIGINT NOT NULL,        -- From UserReviewId.review (or reviewId)
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL,
    updated_at TIMESTAMP NOT NULL,
    flag_reason VARCHAR(255) NOT NULL,
    PRIMARY KEY (reporter_user_id, review_id),
    CONSTRAINT fk_flag_reporter FOREIGN KEY (reporter_user_id) REFERENCES users(id) ON DELETE CASCADE,
    CONSTRAINT fk_flag_review FOREIGN KEY (review_id) REFERENCES reviews(id) ON DELETE CASCADE
);